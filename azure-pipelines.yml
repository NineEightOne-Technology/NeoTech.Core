# Test Pipeline
name: '$(Build.DefinitionName) $(date:yyyyMMdd)$(rev:.r)'

trigger:
- main

pr: 
  branches:
    include:
      - main


workspace:
  clean: 'all'

variables:
  BuildConfiguration: 'Release'
  BuildImage: 'ubuntu-latest'
  TestResultsDirectory: '$(Agent.TempDirectory)/TestResults'
  TestCoverageReportDirectory: '$(Agent.TempDirectory)/coveragereport'
  disable.coverage.autogenerate: 'true'

pool:
  vmImage: '$(BuildImage)'

steps:
- checkout: 'self'
  displayName: 'Check Out Source Code'
  clean: 'true'

- task: UseDotNet@2
  displayName: 'Get .NET SDK'
  inputs:
    packageType: 'sdk'
    useGlobalJson: true

- task: DotNetCoreCLI@2
  displayName: 'Restore nuget Packages'
  inputs:
    arguments: '--configuration $(BuildConfiguration)'
    command: 'restore'
    projects: '**/*.sln'
    feedsToUse: 'config'
    nugetConfigPath: 'nuget.config'
    verbosityRestore: 'Minimal'

- task: DotNetCoreCLI@2
  displayName: 'Build Projects'
  inputs:
    command: 'build'
    projects: '**/*.sln'
    arguments: '--configuration $(BuildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: 'test'
    projects: '**/*[Tt]ests/*Tests.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" --no-build --no-restore'
    publishTestResults: true
    testRunTitle: 'Running Unit Tests'

- task: reportgenerator@4
  displayName: 'Generate Code Coverage Report'
  inputs:
    reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    targetdir: '$(TestCoverageReportDirectory)'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Report'
  inputs:
    codeCoverageTool: 'Cobertura'
    reportDirectory: '$(TestCoverageReportDirectory)'
    summaryFileLocation: '$(TestCoverageReportDirectory)/Cobertura.xml'
    failIfCoverageEmpty: true

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    arguments: '--configuration $(BuildConfiguration) --no-restore'
    packagesToPack: '**/*.csproj;'
    packDirectory: '$(Build.ArtifactStagingDirectory)/nuget'
    nobuild: true
    versioningScheme: 'off'
    verbosityPack: Normal

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'drop'
    publishLocation: 'pipeline'